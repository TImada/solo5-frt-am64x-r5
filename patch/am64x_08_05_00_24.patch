diff --git a/examples/networking/lwip/enet_lwip_cpsw/test_enet.c b/examples/networking/lwip/enet_lwip_cpsw/test_enet.c
index 432784b9..5facd1df 100644
--- a/examples/networking/lwip/enet_lwip_cpsw/test_enet.c
+++ b/examples/networking/lwip/enet_lwip_cpsw/test_enet.c
@@ -54,7 +54,7 @@
 #include "test_enet_extphy.h"
 #endif
 
-static void EnetApp_addMCastEntry(Enet_Type enetType,
+void EnetApp_addMCastEntry(Enet_Type enetType,
                                   uint32_t instId,
                                   uint32_t coreId,
                                   const uint8_t *testMCastAddr,
@@ -275,7 +275,7 @@ int enet_lwip_example(void *args)
     return 0;
 }
 
-static void EnetApp_addMCastEntry(Enet_Type enetType,
+void EnetApp_addMCastEntry(Enet_Type enetType,
                                   uint32_t instId,
                                   uint32_t coreId,
                                   const uint8_t *testMCastAddr,
diff --git a/source/drivers/makefile.am64x.r5f.gcc-armv7 b/source/drivers/makefile.am64x.r5f.gcc-armv7
index 90c5fcf9..e6764027 100644
--- a/source/drivers/makefile.am64x.r5f.gcc-armv7
+++ b/source/drivers/makefile.am64x.r5f.gcc-armv7
@@ -5,10 +5,8 @@
 export MCU_PLUS_SDK_PATH?=$(abspath ../..)
 include $(MCU_PLUS_SDK_PATH)/imports.mak
 
-CG_TOOL_ROOT=$(CGT_GCC_ARMV7_PATH)
-
-CC=$(CGT_GCC_ARMV7_PATH)/bin/arm-none-eabi-gcc
-AR=$(CGT_GCC_ARMV7_PATH)/bin/arm-none-eabi-gcc-ar
+CC=arm-none-eabi-gcc
+AR=arm-none-eabi-gcc-ar
 
 PROFILE?=release
 ConfigName:=$(PROFILE)
diff --git a/source/drivers/uart/v0/uart.h b/source/drivers/uart/v0/uart.h
index 40ccfafa..5cbbc3d7 100644
--- a/source/drivers/uart/v0/uart.h
+++ b/source/drivers/uart/v0/uart.h
@@ -1385,6 +1385,7 @@ static inline uint32_t UART_readLineStatus(uint32_t baseAddr)
 
 static inline uint8_t UART_getCharFifo(uint32_t baseAddr, uint8_t *readBuf)
 {
+    (void)            readBuf;
     uint8_t           readByte = 0;
     uint32_t          waitCount = UART_ERROR_COUNT;
     uint32_t          errorVal;
diff --git a/source/drivers/udma/udma_utils.c b/source/drivers/udma/udma_utils.c
index 5b31c3d9..7b4d90bb 100755
--- a/source/drivers/udma/udma_utils.c
+++ b/source/drivers/udma/udma_utils.c
@@ -247,7 +247,13 @@ uint64_t Udma_defaultVirtToPhyFxn(const void *virtAddr,
                                   uint32_t chNum,
                                   void *appData)
 {
+#if defined (__aarch64__)
     return ((uint64_t) virtAddr);
+#else
+    /* R5 is 32-bit machine. This is a workaround to avoid incorrect cast      by GCC */
+    uintptr_t va = (uintptr_t)virtAddr;
+    return (uint64_t)va;
+#endif
 }
 
 void *Udma_defaultPhyToVirtFxn(uint64_t phyAddr,
diff --git a/source/kernel/freertos/FreeRTOS-Kernel/tasks.c b/source/kernel/freertos/FreeRTOS-Kernel/tasks.c
index baaf4f69..41a80523 100644
--- a/source/kernel/freertos/FreeRTOS-Kernel/tasks.c
+++ b/source/kernel/freertos/FreeRTOS-Kernel/tasks.c
@@ -3422,6 +3422,8 @@ void vTaskMissedYield( void )
  */
 static portTASK_FUNCTION( prvIdleTask, pvParameters )
 {
+    portTASK_USES_FLOATING_POINT();
+
     /* Stop warnings. */
     ( void ) pvParameters;
 
diff --git a/source/kernel/freertos/FreeRTOS-Kernel/timers.c b/source/kernel/freertos/FreeRTOS-Kernel/timers.c
index eb422969..4d62c331 100644
--- a/source/kernel/freertos/FreeRTOS-Kernel/timers.c
+++ b/source/kernel/freertos/FreeRTOS-Kernel/timers.c
@@ -550,6 +550,8 @@
 
     static portTASK_FUNCTION( prvTimerTask, pvParameters )
     {
+        portTASK_USES_FLOATING_POINT();
+
         TickType_t xNextExpireTime;
         BaseType_t xListWasEmpty;
 
diff --git a/source/kernel/freertos/config/am64x/r5f/FreeRTOSConfig.h b/source/kernel/freertos/config/am64x/r5f/FreeRTOSConfig.h
index fb675f1d..872b92a3 100644
--- a/source/kernel/freertos/config/am64x/r5f/FreeRTOSConfig.h
+++ b/source/kernel/freertos/config/am64x/r5f/FreeRTOSConfig.h
@@ -99,7 +99,7 @@ extern "C"
 #define configCHECK_FOR_STACK_OVERFLOW          (0)
 #endif
 #define configQUEUE_REGISTRY_SIZE               (32)
-#define configUSE_QUEUE_SETS                    (0)
+#define configUSE_QUEUE_SETS                    (1)
 #define configUSE_TIME_SLICING                  (0) /* keep as 0 to get same functionality as SysBIOS6 */
 #define configUSE_NEWLIB_REENTRANT              (0)
 #define configENABLE_BACKWARD_COMPATIBILITY     (1)
@@ -118,7 +118,7 @@ extern "C"
                                                      */
 #define configSUPPORT_DYNAMIC_ALLOCATION        (1)
 #define configTOTAL_HEAP_SIZE                   (4*1024) /* not used when heap_3.c is the selected heap */
-#define configAPPLICATION_ALLOCATED_HEAP        (0)
+#define configAPPLICATION_ALLOCATED_HEAP        (1)
 
 /* run-time stats config */
 #if (configOPTIMIZE_FOR_LATENCY==0)
diff --git a/source/kernel/freertos/makefile.am64x.r5f.gcc-armv7 b/source/kernel/freertos/makefile.am64x.r5f.gcc-armv7
index fe17057f..02001b08 100644
--- a/source/kernel/freertos/makefile.am64x.r5f.gcc-armv7
+++ b/source/kernel/freertos/makefile.am64x.r5f.gcc-armv7
@@ -5,10 +5,8 @@
 export MCU_PLUS_SDK_PATH?=$(abspath ../../..)
 include $(MCU_PLUS_SDK_PATH)/imports.mak
 
-CG_TOOL_ROOT=$(CGT_GCC_ARMV7_PATH)
-
-CC=$(CGT_GCC_ARMV7_PATH)/bin/arm-none-eabi-gcc
-AR=$(CGT_GCC_ARMV7_PATH)/bin/arm-none-eabi-gcc-ar
+CC=arm-none-eabi-gcc
+AR=arm-none-eabi-gcc-ar
 
 PROFILE?=release
 ConfigName:=$(PROFILE)
@@ -47,7 +45,7 @@ FILES_common := \
     timers.c \
     queue.c \
     list.c \
-    heap_3.c \
+    heap_4.c \
     FreeRTOS_POSIX_clock.c \
     FreeRTOS_POSIX_mqueue.c \
     FreeRTOS_POSIX_pthread_barrier.c \
@@ -102,10 +100,8 @@ CFLAGS_common := \
     -Wall \
     -Werror \
     -g \
-    -Wno-gnu-variable-sized-type-not-at-end \
     -Wno-unused-function \
     -Wno-int-to-pointer-cast \
-    -Wno-pointer-to-int-cast \
     -Wno-unused-but-set-variable \
     -fdata-sections \
     -ffunction-sections \
diff --git a/source/networking/.meta/enet_cpsw/templates/am64x_am243x/enet_soc_cfg.c.xdt b/source/networking/.meta/enet_cpsw/templates/am64x_am243x/enet_soc_cfg.c.xdt
index cb91daa9..38f239cd 100644
--- a/source/networking/.meta/enet_cpsw/templates/am64x_am243x/enet_soc_cfg.c.xdt
+++ b/source/networking/.meta/enet_cpsw/templates/am64x_am243x/enet_soc_cfg.c.xdt
@@ -776,7 +776,7 @@ static EnetRm_ResPrms gEnetAppRmDefCfg_3G =
             .coreId        = `module.getCpuID()`,
             .numTxCh       = ENET_SYSCFG_TX_CHANNELS_NUM,    /* numTxCh */
             .numRxFlows    = (ENET_SYSCFG_RX_FLOWS_NUM + 1),    /* numRxFlows. Need one additional flow for reserved flow  */
-            .numMacAddress = 4U,    /* numMacAddress */
+            .numMacAddress = 2U,    /* numMacAddress */
         },
     },
     .numCores = 1U,
@@ -832,4 +832,4 @@ const EnetRm_IoctlPermissionTable *EnetAppRm_getIoctlPermissionInfo(Enet_Type en
     }
 
     return(ioctlPerm);
-}
\ No newline at end of file
+}
diff --git a/source/networking/.meta/enet_cpsw/templates/enet_lwipif.c.xdt b/source/networking/.meta/enet_cpsw/templates/enet_lwipif.c.xdt
index b3cdfce2..1f2094d1 100644
--- a/source/networking/.meta/enet_cpsw/templates/enet_lwipif.c.xdt
+++ b/source/networking/.meta/enet_cpsw/templates/enet_lwipif.c.xdt
@@ -40,6 +40,8 @@
 
 #include <lwip2lwipif.h>
 
+#include "portmacro.h"
+
 /* ========================================================================== */
 /*                           Macros & Typedefs                                */
 /* ========================================================================== */
@@ -530,6 +532,8 @@ static void LwipifEnetApp_postTxPktEvent(void* pArg)
 %if(instance.RtosVariant == "FreeRTOS"){
 static err_t LwipifEnetApp_createPollTask(struct netif *netif)
 {
+    portTASK_USES_FLOATING_POINT();
+
     TaskP_Params params;
     int32_t status;
     ClockP_Params clkPrms;
@@ -714,6 +718,8 @@ void LwipifEnetApp_createTxPktHandlerTask(struct netif *netif)
 
 static void LwipifEnetApp_rxPacketTask(void *arg)
 {
+    portTASK_USES_FLOATING_POINT();
+
     struct netif *netif = (struct netif *) arg;
     while (!shutDownFlag)
     {
@@ -734,6 +740,8 @@ static void LwipifEnetApp_rxPacketTask(void *arg)
 
 static void LwipifEnetApp_txPacketTask(void *arg)
 {
+    portTASK_USES_FLOATING_POINT();
+
     struct netif *netif = (struct netif *) arg;
     while (!shutDownFlag)
     {
@@ -773,4 +781,4 @@ static void LwipifEnetApp_postPollLink(ClockP_Object *clkObj, void *arg)
         SemaphoreP_post(hpollSem);
     }
 }
-%}
\ No newline at end of file
+%}
diff --git a/source/networking/enet/core/src/core/enet_utils.c b/source/networking/enet/core/src/core/enet_utils.c
index fb37ba12..954613f8 100644
--- a/source/networking/enet/core/src/core/enet_utils.c
+++ b/source/networking/enet/core/src/core/enet_utils.c
@@ -56,7 +56,11 @@
 /*                           Macros & Typedefs                                */
 /* ========================================================================== */
 
+#ifdef __GNUC__
+#define __NOP  asm("nop")
+#else
 #define __NOP  __nop()
+#endif
 
 #define NOP5   do { __NOP; __NOP; __NOP; __NOP; __NOP; } while (0)
 
diff --git a/source/networking/enet/core/src/dma/udma/enet_udma_priv.c b/source/networking/enet/core/src/dma/udma/enet_udma_priv.c
index ec0d5496..36655d83 100644
--- a/source/networking/enet/core/src/dma/udma/enet_udma_priv.c
+++ b/source/networking/enet/core/src/dma/udma/enet_udma_priv.c
@@ -357,6 +357,10 @@ int32_t EnetUdma_submitPkts(EnetPer_Handle hPer,
     uint8_t dscpIPv4En, tosVal;
     uint32_t totalPacketFilledLen = 0;
     EnetUdma_SGListEntry *sgList;
+#ifdef __arm__
+    uintptr_t descptr;
+    uintptr_t bufptr;
+#endif
 
     isExposedRing = (Udma_ringGetMode(hUdmaRing) == TISCI_MSG_VALUE_RM_RING_MODE_RING);
 #if defined(SOC_AM64X) || defined(SOC_AM243X)
@@ -396,9 +400,19 @@ int32_t EnetUdma_submitPkts(EnetPer_Handle hPer,
                 {
                     pHDesc = &pDmaDesc->hostBufDesc[i - ENET_UDMA_CPSW_HOSTBUFDESC_INDEX].desc;
                     /* Link the Descs */
+#ifdef __arm__
+                    descptr = (uintptr_t)pHDesc;
+                    CSL_udmapCppi5LinkDesc(pHDescPrev, (uint64_t) descptr);
+#else
                     CSL_udmapCppi5LinkDesc(pHDescPrev, (uint64_t) pHDesc);
+#endif
                 }
+#ifdef __arm__
+                bufptr = (uintptr_t)sgList[i].bufPtr;
+                CSL_udmapCppi5SetBufferAddr(pHDesc, (uint64_t)bufptr);
+#else
                 CSL_udmapCppi5SetBufferAddr(pHDesc, (uint64_t) sgList[i].bufPtr);
+#endif
                 if (ENET_UDMA_DIR_TX == transferDir)
                 {
                     CSL_udmapCppi5SetBufferLen(pHDesc, sgList[i].segmentFilledLen);
@@ -407,7 +421,11 @@ int32_t EnetUdma_submitPkts(EnetPer_Handle hPer,
                 {
                     CSL_udmapCppi5SetBufferLen(pHDesc, sgList[i].segmentAllocLen);
                 }
+#ifdef __arm__
+                CSL_udmapCppi5SetOrgBufferAddr(pHDesc, (uint64_t)bufptr);
+#else
                 CSL_udmapCppi5SetOrgBufferAddr(pHDesc, (uint64_t) sgList[i].bufPtr);
+#endif
                 CSL_udmapCppi5SetOrgBufferLen(pHDesc, sgList[i].segmentAllocLen);
                 totalPacketFilledLen += sgList[i].segmentFilledLen;
                 pHDescPrev = pHDesc;
@@ -1400,6 +1418,9 @@ int32_t EnetUdma_ringDequeue(Udma_RingHandle hUdmaRing,
     CSL_UdmapCppi5HMPD *pDescEntry;
     CSL_UdmapCppi5HMPD *pNextDescEntryVirt;
     EnetUdma_DmaDesc *pVirtDmaDesc;
+#ifdef __arm__
+    uintptr_t ptr;
+#endif
 
     if ((pDmaDesc != NULL) && (hUdmaRing != NULL))
     {
@@ -1441,8 +1462,13 @@ int32_t EnetUdma_ringDequeue(Udma_RingHandle hUdmaRing,
             pDescEntry = &pVirtDmaDesc->hpdDesc.hostDesc;
             while (pDescEntry != NULL)
             {
+#ifdef __arm__
+                pDescEntry->bufPtr = (uintptr_t) EnetUtils_physToVirt(pDescEntry->bufPtr, NULL);
+                pDescEntry->orgBufPtr = (uintptr_t) EnetUtils_physToVirt(pDescEntry->orgBufPtr, NULL);
+#else
                 pDescEntry->bufPtr = (uint64_t) EnetUtils_physToVirt(pDescEntry->bufPtr, NULL);
                 pDescEntry->orgBufPtr = (uint64_t) EnetUtils_physToVirt(pDescEntry->orgBufPtr, NULL);
+#endif
                 if (pDescEntry->nextDescPtr != 0ULL)
                 {
                     pNextDescEntryVirt = (CSL_UdmapCppi5HMPD*) EnetUtils_physToVirt(pDescEntry->nextDescPtr, NULL);
@@ -1451,7 +1477,12 @@ int32_t EnetUdma_ringDequeue(Udma_RingHandle hUdmaRing,
                 }
                 else
                 {
+#ifdef __arm__
+                    ptr = (uint32_t)pDescEntry->nextDescPtr & 0xFFFFFFFFU;
+                    pDescEntry = (CSL_UdmapCppi5HMPD*) ptr;
+#else
                     pDescEntry = (CSL_UdmapCppi5HMPD*) pDescEntry->nextDescPtr;
+#endif
                 }
             }
 
@@ -1655,9 +1686,14 @@ void EnetUdma_buffDescInit(EnetUdma_CpswHpdDesc *hpdDesc)
     CSL_udmapCppi5SetSrcTag(hostDesc, 0x0000U);
     CSL_udmapCppi5SetDstTag(hostDesc, 0x0000U);
     CSL_udmapCppi5LinkDesc(hostDesc, 0U);
+#ifdef __arm__
+    CSL_udmapCppi5SetBufferAddr(hostDesc, (uint64_t)0ULL);
+    CSL_udmapCppi5SetOrgBufferAddr(hostDesc, (uint64_t)0ULL);
+#else
     CSL_udmapCppi5SetBufferAddr(hostDesc, (uint64_t)NULL);
-    CSL_udmapCppi5SetBufferLen(hostDesc, 0U);
     CSL_udmapCppi5SetOrgBufferAddr(hostDesc, (uint64_t)NULL);
+#endif
+    CSL_udmapCppi5SetBufferLen(hostDesc, 0U);
     CSL_udmapCppi5SetOrgBufferLen(hostDesc, 0U);
 }
 
diff --git a/source/networking/enet/makefile.cpsw.am64x.r5f.gcc-armv7 b/source/networking/enet/makefile.cpsw.am64x.r5f.gcc-armv7
new file mode 100644
index 00000000..7fe07a9b
--- /dev/null
+++ b/source/networking/enet/makefile.cpsw.am64x.r5f.gcc-armv7
@@ -0,0 +1,229 @@
+#
+# Auto generated makefile
+#
+
+export MCU_PLUS_SDK_PATH?=$(abspath ../../..)
+include $(MCU_PLUS_SDK_PATH)/imports.mak
+
+CC=arm-none-eabi-gcc
+AR=arm-none-eabi-ar
+
+PROFILE?=release
+ConfigName:=$(PROFILE)
+
+LIBNAME:=enet-cpsw.am64x.r5f.gcc-armv7.$(PROFILE).lib
+
+FILES_common := \
+    enet.c \
+    enet_trace.c \
+    enet_utils.c \
+    enet_osal.c \
+    enet_queue.c \
+    enet_rm.c \
+    enet_rm_ioctl.c \
+    enet_rm_ioctl_register.c \
+    enet_osal_dflt.c \
+    enet_utils_dflt.c \
+    enet_phymdio_dflt.c \
+    enet_phymdio_dflt_ioctl.c \
+    enet_phymdio_dflt_ioctl_register.c \
+    mod_null.c \
+    mdio.c \
+    mdio_manual_ioctl.c \
+    mdio_ioctl.c \
+    mdio_ioctl_register.c \
+    cpsw_macport.c \
+    cpsw_macport_ioctl.c \
+    cpsw_macport_ioctl_register.c \
+    cpsw_macport_intervlan.c \
+    cpsw_macport_intervlan_ioctl.c \
+    cpsw_macport_intervlan_ioctl_register.c \
+    cpsw_macport_est.c \
+    cpsw_macport_est_ioctl.c \
+    cpsw_hostport.c \
+    cpsw_hostport_ioctl.c \
+    cpsw_hostport_ioctl_register.c \
+    cpsw_ale.c \
+    cpsw_ale_ioctl.c \
+    cpsw_ale_ioctl_register.c \
+    cpsw_stats.c \
+    cpsw_stats_ioctl.c \
+    cpsw_stats_ioctl_register.c \
+    cpsw_cpts.c \
+    cpsw_cpts_ioctl.c \
+    cpsw_cpts_ioctl_register.c \
+    per_null.c \
+    cpsw_intervlan.c \
+    cpsw.c \
+    cpsw_ioctl.c \
+    cpsw_ioctl_register.c \
+    cpsw_est.c \
+    cpsw_est_ioctl.c \
+    cpsw_est_ioctl_register.c \
+    enet_hostport.c \
+    enet_udma.c \
+    enet_udma_priv.c \
+    csl_cpgmac_sl.c \
+    csl_cpsw.c \
+    csl_cpsw_ss.c \
+    csl_cpsw_ale_9g_tblcfg.c \
+    csl_cpts.c \
+    csl_mdio.c \
+    k3_soc.c \
+    enetphy.c \
+    generic_phy.c \
+    dp83869.c \
+    dp83867.c \
+    enet_apputils.c \
+    enet_appmemutils.c \
+    enet_appethpatterns.c \
+    enet_udmautils.c \
+    enet_ioctlutils.c \
+    enet_apputils_k3.c \
+
+FILES_PATH_common = \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/core/src/core \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/core/src/mod \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/core/src/per \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/core/src/per/V1 \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/core/src/common \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/core/src/dma/udma \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/emac/V5/priv \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/cpsw/V5/V5_0/priv \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/cpsw/V5/priv \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/cpts \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/mdio \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/soc/k3 \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/soc/k3/am64x_am243x \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/core/src/phy \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/utils \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/utils/V3 \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/utils/defcfg \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/board/src \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/board/src/am64x_am243x_evm \
+
+INCLUDES_common := \
+    -I${MCU_PLUS_SDK_PATH}/source \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/utils/include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/utils/V3 \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/include/core \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/include/phy \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/src/phy \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/emac/V5 \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/cpsw/V5 \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/cpsw/V5/V5_0 \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/cpts \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/hw_include/mdio \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/soc/k3/am64x_am243x \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/board \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/board/src/am64x_am243x_evm/include \
+
+DEFINES_common := \
+    -DSOC_AM64X \
+    -DMAKEFILE_BUILD \
+    -DENET_CFG_ASSERT=1 \
+    -DENET_CFG_PRINT_ENABLE \
+    -DENET_CFG_TRACE_LEVEL=3 \
+    -DENET_ENABLE_PER_CPSW=1 \
+    -DENABLE_ENET_LOG \
+
+DEFINES_debug := \
+    -DENET_CFG_DEV_ERROR=1 \
+    -DLWIPIF_INSTRUMENTATION_ENABLED=1 \
+    -DENETDMA_INSTRUMENTATION_ENABLED=1 \
+
+CFLAGS_common := \
+    -mcpu=cortex-r5 \
+    -mfloat-abi=hard \
+    -mfpu=vfpv3-d16 \
+    -mthumb \
+    -Wall \
+    -Werror \
+    -g \
+    -Wno-enum-compare \
+    -Wno-unused-function \
+    -Wno-extra \
+    -ffunction-sections \
+    -fdata-sections \
+
+CFLAGS_release := \
+    -O2 \
+
+CFLAGS_cpp_common := \
+    -Wno-c99-designator \
+    -Wno-extern-c-compat \
+    -Wno-c++11-narrowing \
+    -Wno-reorder-init-list \
+    -Wno-deprecated-register \
+    -Wno-writable-strings \
+    -Wno-enum-compare \
+    -Wno-reserved-user-defined-literal \
+    -Wno-unused-const-variable \
+    -x c++ \
+
+CFLAGS_debug := \
+    -D_DEBUG_=1 \
+
+ARFLAGS_common := \
+    rc \
+
+FILES := $(FILES_common) $(FILES_$(PROFILE))
+ASMFILES := $(ASMFILES_common) $(ASMFILES_$(PROFILE))
+FILES_PATH := $(FILES_PATH_common) $(FILES_PATH_$(PROFILE))
+CFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
+ASMFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
+ifeq ($(CPLUSPLUS_BUILD), yes)
+CFLAGS += $(CFLAGS_cpp_common)
+endif
+DEFINES := $(DEFINES_common) $(DEFINES_$(PROFILE))
+INCLUDES := $(INCLUDES_common) $(INCLUDE_$(PROFILE))
+ARFLAGS := $(ARFLAGS_common) $(ARFLAGS_$(PROFILE))
+
+LIBDIR := lib
+OBJDIR := obj/am64x/gcc-armv7/$(PROFILE)/r5f/enet-cpsw/
+OBJS := $(FILES:%.c=%.obj)
+OBJS += $(ASMFILES:%.S=%.obj)
+DEPS := $(FILES:%.c=%.d)
+
+vpath %.obj $(OBJDIR)
+vpath %.c $(FILES_PATH)
+vpath %.S $(FILES_PATH)
+
+$(OBJDIR)/%.obj %.obj: %.c
+	@echo  Compiling: $(LIBNAME): $<
+	$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -MMD -o $(OBJDIR)/$@ $<
+
+$(OBJDIR)/%.obj %.obj: %.S
+	@echo  Compiling: $(LIBNAME): $<
+	$(CC) -c $(ASMFLAGS) -o $(OBJDIR)/$@ $<
+
+all: $(LIBDIR)/$(LIBNAME)
+
+$(LIBDIR)/$(LIBNAME): $(OBJS) | $(LIBDIR)
+	@echo  .
+	@echo  Archiving: $(LIBNAME) to $@ ...
+	$(AR) $(ARFLAGS) $@ $(addprefix $(OBJDIR), $(OBJS))
+	@echo  Archiving: $(LIBNAME) Done !!!
+	@echo  .
+
+clean:
+	@echo  Cleaning: $(LIBNAME) ...
+	$(RMDIR) $(OBJDIR)
+	$(RM) $(LIBDIR)/$(LIBNAME)
+
+scrub:
+	@echo  Scrubing: $(LIBNAME) ...
+	-$(RMDIR) obj/
+	-$(RMDIR) lib/
+
+$(OBJS): | $(OBJDIR)
+
+$(LIBDIR) $(OBJDIR):
+	$(MKDIR) $@
+
+-include $(addprefix $(OBJDIR)/, $(DEPS))
diff --git a/source/networking/enet/makefile.lwipif-cpsw-freertos.am64x.r5f.gcc-armv7 b/source/networking/enet/makefile.lwipif-cpsw-freertos.am64x.r5f.gcc-armv7
new file mode 100644
index 00000000..6ad872c9
--- /dev/null
+++ b/source/networking/enet/makefile.lwipif-cpsw-freertos.am64x.r5f.gcc-armv7
@@ -0,0 +1,143 @@
+#
+# Auto generated makefile
+#
+
+export MCU_PLUS_SDK_PATH?=$(abspath ../../..)
+include $(MCU_PLUS_SDK_PATH)/imports.mak
+
+CC=arm-none-eabi-gcc
+AR=arm-none-eabi-ar
+
+PROFILE?=release
+ConfigName:=$(PROFILE)
+
+LIBNAME:=lwipif-cpsw-freertos.am64x.r5f.gcc-armv7.$(PROFILE).lib
+
+FILES_common := \
+    lwip2enet.c \
+    lwip2lwipif.c \
+    pbufQ.c \
+
+FILES_PATH_common = \
+    ${MCU_PLUS_SDK_PATH}/source/networking/enet/core/lwipif/src \
+
+INCLUDES_common := \
+    -I${CG_TOOL_ROOT}/include/c \
+    -I${MCU_PLUS_SDK_PATH}/source \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/utils/include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/include/core \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/include/phy \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/src/phy \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/core/lwipif/inc \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/freertos/include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/enet/soc/k3/am64x_am243x \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-config/am64x \
+
+DEFINES_common := \
+    -DSOC_AM64X \
+    -DMAKEFILE_BUILD \
+    -DENET_CFG_ASSERT=1 \
+    -DENET_CFG_PRINT_ENABLE \
+    -DENET_CFG_TRACE_LEVEL=3 \
+    -DENET_ENABLE_PER_CPSW=1 \
+    -DENABLE_ENET_LOG \
+
+DEFINES_debug := \
+    -DENET_CFG_DEV_ERROR=1 \
+    -DLWIPIF_INSTRUMENTATION_ENABLED=1 \
+    -DENETDMA_INSTRUMENTATION_ENABLED=1 \
+
+CFLAGS_common := \
+    -mcpu=cortex-r5 \
+    -mfloat-abi=hard \
+    -mfpu=vfpv3-d16 \
+    -mthumb \
+    -Wall \
+    -Werror \
+    -g \
+    -Wno-unused-function \
+    -Wno-extra \
+    -ffunction-sections \
+    -fdata-sections \
+
+CFLAGS_release := \
+    -O2 \
+
+CFLAGS_cpp_common := \
+    -Wno-c99-designator \
+    -Wno-extern-c-compat \
+    -Wno-c++11-narrowing \
+    -Wno-reorder-init-list \
+    -Wno-deprecated-register \
+    -Wno-writable-strings \
+    -Wno-enum-compare \
+    -Wno-reserved-user-defined-literal \
+    -Wno-unused-const-variable \
+    -x c++ \
+
+CFLAGS_debug := \
+    -D_DEBUG_=1 \
+
+ARFLAGS_common := \
+    rc \
+
+FILES := $(FILES_common) $(FILES_$(PROFILE))
+ASMFILES := $(ASMFILES_common) $(ASMFILES_$(PROFILE))
+FILES_PATH := $(FILES_PATH_common) $(FILES_PATH_$(PROFILE))
+CFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
+ASMFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
+ifeq ($(CPLUSPLUS_BUILD), yes)
+CFLAGS += $(CFLAGS_cpp_common)
+endif
+DEFINES := $(DEFINES_common) $(DEFINES_$(PROFILE))
+INCLUDES := $(INCLUDES_common) $(INCLUDE_$(PROFILE))
+ARFLAGS := $(ARFLAGS_common) $(ARFLAGS_$(PROFILE))
+
+LIBDIR := lib
+OBJDIR := obj/am64x/gcc-armv7/$(PROFILE)/r5f/lwipif-cpsw-freertos/
+OBJS := $(FILES:%.c=%.obj)
+OBJS += $(ASMFILES:%.S=%.obj)
+DEPS := $(FILES:%.c=%.d)
+
+vpath %.obj $(OBJDIR)
+vpath %.c $(FILES_PATH)
+vpath %.S $(FILES_PATH)
+
+$(OBJDIR)/%.obj %.obj: %.c
+	@echo  Compiling: $(LIBNAME): $<
+	$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -MMD -o $(OBJDIR)/$@ $<
+
+$(OBJDIR)/%.obj %.obj: %.S
+	@echo  Compiling: $(LIBNAME): $<
+	$(CC) -c $(ASMFLAGS) -o $(OBJDIR)/$@ $<
+
+all: $(LIBDIR)/$(LIBNAME)
+
+$(LIBDIR)/$(LIBNAME): $(OBJS) | $(LIBDIR)
+	@echo  .
+	@echo  Archiving: $(LIBNAME) to $@ ...
+	$(AR) $(ARFLAGS) $@ $(addprefix $(OBJDIR), $(OBJS))
+	@echo  Archiving: $(LIBNAME) Done !!!
+	@echo  .
+
+clean:
+	@echo  Cleaning: $(LIBNAME) ...
+	$(RMDIR) $(OBJDIR)
+	$(RM) $(LIBDIR)/$(LIBNAME)
+
+scrub:
+	@echo  Scrubing: $(LIBNAME) ...
+	-$(RMDIR) obj/
+	-$(RMDIR) lib/
+
+$(OBJS): | $(OBJDIR)
+
+$(LIBDIR) $(OBJDIR):
+	$(MKDIR) $@
+
+-include $(addprefix $(OBJDIR)/, $(DEPS))
diff --git a/source/networking/enet/utils/V3/enet_mcm.c b/source/networking/enet/utils/V3/enet_mcm.c
index 1227a8c7..61e06696 100644
--- a/source/networking/enet/utils/V3/enet_mcm.c
+++ b/source/networking/enet/utils/V3/enet_mcm.c
@@ -276,6 +276,8 @@ static void EnetMcm_evtCb(Enet_Event evt,
 
 static void EnetMcm_asyncIoctlTask(void * arg)
 {
+    portTASK_USES_FLOATING_POINT();
+
     EnetMcm_Handle hMcm = (EnetMcm_Handle)arg;
     SemaphoreP_Object * asyncIoctlSem = &hMcm->asyncIoctlSemObj;
 
@@ -571,6 +573,8 @@ static void EnetMcm_timerCb(ClockP_Object *clkInst, void * arg)
 
 static void EnetMcm_periodicTick(void * mcmHandle)
 {
+    portTASK_USES_FLOATING_POINT();
+
     SemaphoreP_Object * timerSem;
     EnetMcm_Handle hMcm       = (EnetMcm_Handle)mcmHandle;
 
@@ -794,6 +798,8 @@ static int32_t EnetMcm_ioctlHandler(EnetMcm_Handle hMcm,
 
 static void EnetMcm_serverTask(void * McmHandle)
 {
+    portTASK_USES_FLOATING_POINT();
+
     volatile bool isShutdownMcm = false;
     EnetMcm_Handle hMcm         = (EnetMcm_Handle)McmHandle;
 
diff --git a/source/networking/enet/utils/enet_apputils.c b/source/networking/enet/utils/enet_apputils.c
index c4245434..15222fdb 100644
--- a/source/networking/enet/utils/enet_apputils.c
+++ b/source/networking/enet/utils/enet_apputils.c
@@ -194,8 +194,12 @@ int32_t EnetAppUtils_getNum(void)
 
 #if defined(UART_ENABLED) && defined(ENETAPPUTILS_UART_ALLOWED)
     UART_scanFmt("%d", &num);
+#else
+#ifdef __arm__
+    scanf("%ld", &num);
 #else
     scanf("%d", &num);
+#endif
 #endif
 
     return num;
@@ -207,8 +211,12 @@ uint32_t EnetAppUtils_getHex(void)
 
 #if defined(UART_ENABLED) && defined(ENETAPPUTILS_UART_ALLOWED)
     UART_scanFmt("%x", &num);
+#else
+#ifdef __arm__
+    scanf("%lx", &num);
 #else
     scanf("%x", &num);
+#endif
 #endif
 
     return num;
diff --git a/source/networking/lwip/lwip-config/am64x/lwipopts.h b/source/networking/lwip/lwip-config/am64x/lwipopts.h
index 812cf86e..b27d1839 100644
--- a/source/networking/lwip/lwip-config/am64x/lwipopts.h
+++ b/source/networking/lwip/lwip-config/am64x/lwipopts.h
@@ -94,11 +94,11 @@ extern "C"
 #define LWIP_HAVE_LOOPIF           (LWIP_NETIF_LOOPBACK && !LWIP_SINGLE_NETIF)
 #define LWIP_LOOPBACK_MAX_PBUFS    10
 
-#define TCP_LISTEN_BACKLOG         1
+#define TCP_LISTEN_BACKLOG         0
 
-#define LWIP_COMPAT_SOCKETS        1
-#define LWIP_SO_RCVTIMEO           1
-#define LWIP_SO_RCVBUF             1
+#define LWIP_COMPAT_SOCKETS        0
+#define LWIP_SO_RCVTIMEO           0
+#define LWIP_SO_RCVBUF             0
 
 #define LWIP_TCPIP_CORE_LOCKING    1
 
@@ -218,7 +218,7 @@ a lot of data that needs to be copied, this should be set high. */
 
 
 /* ---------- TCP options ---------- */
-#define LWIP_TCP                1
+#define LWIP_TCP                0
 #define TCP_TTL                 255
 
 #define LWIP_ALTCP              (LWIP_TCP)
@@ -278,15 +278,15 @@ a lot of data that needs to be copied, this should be set high. */
 /* Define IP_FORWARD to 1 if you wish to have the ability to forward
    IP packets across network interfaces. If you are going to run lwIP
    on a device with only one network interface, define this to 0. */
-#define IP_FORWARD              1
+#define IP_FORWARD              0
 
 /* IP reassembly and segmentation.These are orthogonal even
  * if they both deal with IP fragments */
-#define IP_REASSEMBLY           1
+#define IP_REASSEMBLY           0
 #define IP_REASS_MAX_PBUFS      (10 * ((1500 + PBUF_POOL_BUFSIZE - 1) / PBUF_POOL_BUFSIZE))
 #define MEMP_NUM_REASSDATA      IP_REASS_MAX_PBUFS
-#define IP_FRAG                 1
-#define IPV6_FRAG_COPYHEADER    1
+#define IP_FRAG                 0
+#define IPV6_FRAG_COPYHEADER    0
 
 /* ---------- ICMP options ---------- */
 #define ICMP_TTL                255
@@ -308,7 +308,7 @@ a lot of data that needs to be copied, this should be set high. */
 
 
 /* ---------- UDP options ---------- */
-#define LWIP_UDP                1
+#define LWIP_UDP                0
 #define LWIP_UDPLITE            LWIP_UDP
 #define UDP_TTL                 255
 
@@ -361,16 +361,16 @@ a lot of data that needs to be copied, this should be set high. */
  * we're limited by the command line length so you need to modify the settings
  * in this file.
  */
-#define PPPOE_SUPPORT           1
-#define PPPOS_SUPPORT           1
+#define PPPOE_SUPPORT           0
+#define PPPOS_SUPPORT           0
 
-#define PAP_SUPPORT             1      /* Set > 0 for PAP. */
-#define CHAP_SUPPORT            1      /* Set > 0 for CHAP. */
+#define PAP_SUPPORT             0      /* Set > 0 for PAP. */
+#define CHAP_SUPPORT            0      /* Set > 0 for CHAP. */
 #define MSCHAP_SUPPORT          0      /* Set > 0 for MSCHAP */
 #define CBCP_SUPPORT            0      /* Set > 0 for CBCP (NOT FUNCTIONAL!) */
 #define CCP_SUPPORT             0      /* Set > 0 for CCP */
-#define VJ_SUPPORT              1      /* Set > 0 for VJ header compression. */
-#define MD5_SUPPORT             1      /* Set > 0 for MD5 (see also CHAP) */
+#define VJ_SUPPORT              0      /* Set > 0 for VJ header compression. */
+#define MD5_SUPPORT             0      /* Set > 0 for MD5 (see also CHAP) */
 
 #endif /* PPP_SUPPORT */
 
@@ -401,35 +401,6 @@ a lot of data that needs to be copied, this should be set high. */
 
 #define DEFAULT_ACCEPTMBOX_SIZE         (TCPIP_MBOX_SIZE)
 
-
-/*---------------------------------------------------------------*/
-#if defined(__ARM_ARCH) && (defined(__TI_EABI__) || defined(__clang__))
-    /*------------------------------------------------------------------------*/
-    /* Under EABI, use function to access errno since it likely has TLS in    */
-    /* a thread-safe version of the RTS library.                              */
-    /*------------------------------------------------------------------------*/
-    extern volatile int *__aeabi_errno_addr(void);
-    #define errno (* __aeabi_errno_addr())
-#elif !defined(__C6X_MIGRATION__) && defined(__TMS320C6X__) && defined(__TI_EABI__)
-    /*------------------------------------------------------------------------*/
-    /* Under EABI, use function to access errno since it likely has TLS in    */
-    /* a thread-safe version of the RTS library.                              */
-    /*------------------------------------------------------------------------*/
-    extern int *__c6xabi_errno_addr(void);
-    __TI_TLS_DATA_DECL(int, __errno);
-
-    #define errno (* __c6xabi_errno_addr())
-#else
-    extern _DATA_ACCESS int errno;
-    _TI_PROPRIETARY_PRAGMA("diag_push")
-    /* errno is not allowed under MISRA, anyway */
-    _TI_PROPRIETARY_PRAGMA("CHECK_MISRA(\"-5.6\")") /* duplicated name in another scope (errno) */
-    _TI_PROPRIETARY_PRAGMA("CHECK_MISRA(\"-19.4\")") /* macro expands to parenthesized */
-    #define errno errno
-    _TI_PROPRIETARY_PRAGMA("diag_pop")
-#endif
-
-
 #ifdef __cplusplus
 }
 #endif
diff --git a/source/networking/lwip/lwip-port/include/arch/cc.h b/source/networking/lwip/lwip-port/include/arch/cc.h
index eaee1219..fdf8d257 100644
--- a/source/networking/lwip/lwip-port/include/arch/cc.h
+++ b/source/networking/lwip/lwip-port/include/arch/cc.h
@@ -48,7 +48,9 @@ extern "C"
 #include <sys/select.h>
 
 /* Define byte order of the system */
+#ifndef __GNUC__
 #define BYTE_ORDER LITTLE_ENDIAN
+#endif
 
 /* Use lwip provided errors as ti compiler is too granular*/
 #define LWIP_PROVIDE_ERRNO  1
diff --git a/source/networking/lwip/makefile.stack_freertos.am64x.r5f.gcc-armv7 b/source/networking/lwip/makefile.stack_freertos.am64x.r5f.gcc-armv7
new file mode 100644
index 00000000..4fd1fd66
--- /dev/null
+++ b/source/networking/lwip/makefile.stack_freertos.am64x.r5f.gcc-armv7
@@ -0,0 +1,265 @@
+#
+# Auto generated makefile
+#
+
+export MCU_PLUS_SDK_PATH?=$(abspath ../../..)
+include $(MCU_PLUS_SDK_PATH)/imports.mak
+
+CC=arm-none-eabi-gcc
+AR=arm-none-eabi-ar
+
+PROFILE?=release
+ConfigName:=$(PROFILE)
+
+LIBNAME:=lwip-freertos.am64x.r5f.gcc-armv7.$(PROFILE).lib
+
+FILES_common := \
+    init.c \
+    def.c \
+    dns.c \
+    inet_chksum.c \
+    ip.c \
+    mem.c \
+    memp.c \
+    netif.c \
+    pbuf.c \
+    raw.c \
+    stats.c \
+    sys.c \
+    altcp.c \
+    altcp_alloc.c \
+    altcp_tcp.c \
+    tcp.c \
+    tcp_in.c \
+    tcp_out.c \
+    timeouts.c \
+    udp.c \
+    autoip.c \
+    dhcp.c \
+    etharp.c \
+    icmp.c \
+    igmp.c \
+    ip4_frag.c \
+    ip4.c \
+    ip4_addr.c \
+    dhcp6.c \
+    ethip6.c \
+    icmp6.c \
+    inet6.c \
+    ip6.c \
+    ip6_addr.c \
+    ip6_frag.c \
+    mld6.c \
+    nd6.c \
+    api_lib.c \
+    api_msg.c \
+    err.c \
+    if_api.c \
+    netbuf.c \
+    netdb.c \
+    netifapi.c \
+    sockets.c \
+    tcpip.c \
+    ethernet.c \
+    bridgeif.c \
+    bridgeif_fdb.c \
+    slipif.c \
+    lowpan6_common.c \
+    lowpan6.c \
+    lowpan6_ble.c \
+    zepif.c \
+    auth.c \
+    ccp.c \
+    chap-md5.c \
+    chap_ms.c \
+    chap-new.c \
+    demand.c \
+    eap.c \
+    ecp.c \
+    eui64.c \
+    fsm.c \
+    ipcp.c \
+    ipv6cp.c \
+    lcp.c \
+    magic.c \
+    mppe.c \
+    multilink.c \
+    ppp.c \
+    pppapi.c \
+    pppcrypt.c \
+    pppoe.c \
+    pppol2tp.c \
+    pppos.c \
+    upap.c \
+    utils.c \
+    vj.c \
+    arc4.c \
+    des.c \
+    md4.c \
+    md5.c \
+    sha1.c \
+    snmp_asn1.c \
+    snmp_core.c \
+    snmp_mib2.c \
+    snmp_mib2_icmp.c \
+    snmp_mib2_interfaces.c \
+    snmp_mib2_ip.c \
+    snmp_mib2_snmp.c \
+    snmp_mib2_system.c \
+    snmp_mib2_tcp.c \
+    snmp_mib2_udp.c \
+    snmp_snmpv2_framework.c \
+    snmp_snmpv2_usm.c \
+    snmp_msg.c \
+    snmpv3.c \
+    snmp_netconn.c \
+    snmp_pbuf_stream.c \
+    snmp_raw.c \
+    snmp_scalar.c \
+    snmp_table.c \
+    snmp_threadsync.c \
+    snmp_traps.c \
+    altcp_proxyconnect.c \
+    fs.c \
+    http_client.c \
+    httpd.c \
+     \
+    lwiperf.c \
+    smtp.c \
+    sntp.c \
+    mdns.c \
+    netbiosns.c \
+    tftp_server.c \
+    mqtt.c \
+    altcp_tls_mbedtls.c \
+    altcp_tls_mbedtls_mem.c \
+    snmpv3_mbedtls.c \
+    sys_arch.c \
+
+FILES_PATH_common = \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/smtp \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/tftp \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/mqtt \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/tftp \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/netbiosns \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/mdns \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/altcp_tls \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/http \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/http/makefsdata \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/lwiperf \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/snmp \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/apps/sntp \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/netif \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/netif/ppp \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/netif/ppp/polarssl \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/core \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/core/ipv6 \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/core/ipv4 \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/api \
+    ${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/freertos/src \
+
+INCLUDES_common := \
+    -I${MCU_PLUS_SDK_PATH}/source \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-stack/src/include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/include \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-port/freertos/include \
+    -I${MCU_PLUS_SDK_PATH}/source/kernel/freertos/FreeRTOS-Kernel/include \
+    -I${MCU_PLUS_SDK_PATH}/source/kernel/freertos/portable/TI_ARM_CLANG/ARM_CR5F \
+    -I${MCU_PLUS_SDK_PATH}/source/networking/lwip/lwip-config/am64x \
+    -I${MCU_PLUS_SDK_PATH}/source/kernel/freertos/config/am64x/r5f \
+
+DEFINES_common := \
+    -DSOC_AM64X \
+
+CFLAGS_common := \
+    -mcpu=cortex-r5 \
+    -mfloat-abi=hard \
+    -mfpu=vfpv3-d16 \
+    -mthumb \
+    -Wall \
+    -Werror \
+    -g \
+    -Wno-gnu-variable-sized-type-not-at-end \
+    -Wno-unused-function \
+    -Wno-extra \
+    -mthumb \
+    -fno-strict-aliasing \
+    -ffunction-sections \
+    -fdata-sections \
+
+CFLAGS_release := \
+    -O2 \
+
+CFLAGS_cpp_common := \
+    -Wno-c99-designator \
+    -Wno-extern-c-compat \
+    -Wno-c++11-narrowing \
+    -Wno-reorder-init-list \
+    -Wno-deprecated-register \
+    -Wno-writable-strings \
+    -Wno-enum-compare \
+    -Wno-reserved-user-defined-literal \
+    -Wno-unused-const-variable \
+    -x c++ \
+
+CFLAGS_debug := \
+    -D_DEBUG_=1 \
+
+ARFLAGS_common := \
+    rc \
+
+FILES := $(FILES_common) $(FILES_$(PROFILE))
+ASMFILES := $(ASMFILES_common) $(ASMFILES_$(PROFILE))
+FILES_PATH := $(FILES_PATH_common) $(FILES_PATH_$(PROFILE))
+CFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
+ASMFLAGS := $(CFLAGS_common) $(CFLAGS_$(PROFILE))
+ifeq ($(CPLUSPLUS_BUILD), yes)
+CFLAGS += $(CFLAGS_cpp_common)
+endif
+DEFINES := $(DEFINES_common) $(DEFINES_$(PROFILE))
+INCLUDES := $(INCLUDES_common) $(INCLUDE_$(PROFILE))
+ARFLAGS := $(ARFLAGS_common) $(ARFLAGS_$(PROFILE))
+
+LIBDIR := lib
+OBJDIR := obj/am64x/gcc-armv7/$(PROFILE)/r5f/lwip-freertos/
+OBJS := $(FILES:%.c=%.obj)
+OBJS += $(ASMFILES:%.S=%.obj)
+DEPS := $(FILES:%.c=%.d)
+
+vpath %.obj $(OBJDIR)
+vpath %.c $(FILES_PATH)
+vpath %.S $(FILES_PATH)
+
+$(OBJDIR)/%.obj %.obj: %.c
+	@echo  Compiling: $(LIBNAME): $<
+	$(CC) -c $(CFLAGS) $(INCLUDES) $(DEFINES) -MMD -o $(OBJDIR)/$@ $<
+
+$(OBJDIR)/%.obj %.obj: %.S
+	@echo  Compiling: $(LIBNAME): $<
+	$(CC) -c $(ASMFLAGS) -o $(OBJDIR)/$@ $<
+
+all: $(LIBDIR)/$(LIBNAME)
+
+$(LIBDIR)/$(LIBNAME): $(OBJS) | $(LIBDIR)
+	@echo  .
+	@echo  Archiving: $(LIBNAME) to $@ ...
+	$(AR) $(ARFLAGS) $@ $(addprefix $(OBJDIR), $(OBJS))
+	@echo  Archiving: $(LIBNAME) Done !!!
+	@echo  .
+
+clean:
+	@echo  Cleaning: $(LIBNAME) ...
+	$(RMDIR) $(OBJDIR)
+	$(RM) $(LIBDIR)/$(LIBNAME)
+
+scrub:
+	@echo  Scrubing: $(LIBNAME) ...
+	-$(RMDIR) obj/
+	-$(RMDIR) lib/
+
+$(OBJS): | $(OBJDIR)
+
+$(LIBDIR) $(OBJDIR):
+	$(MKDIR) $@
+
+-include $(addprefix $(OBJDIR)/, $(DEPS))
